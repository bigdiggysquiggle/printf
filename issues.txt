FAILED TESTS:\n
# TEST NUMBER (TYPE OF ARG)
  INSTRUCTION();
  1. your function ft_printf
  2. unix function printf
     (returned value) -->written on stdout<--

# 0016 (int)
  ft_printf("%x", -42);
  1. (   16) -->ffffffffffffffd6<--
  2. (    8) -->ffffffd6<--

# 0017 (int)
  ft_printf("%X", -42);
  1. (   16) -->FFFFFFFFFFFFFFD6<--
  2. (    8) -->FFFFFFD6<--

# 0044 (int)
  ft_printf("%#08x", 42);
  1. (    9) -->0x000002a<--
  2. (    8) -->0x00002a<--

# 0045 (int)
  ft_printf("%#-08x", 42);
  1. (    9) -->0x2a     <--
  2. (    8) -->0x2a    <--

# 0049 (char *)
  ft_printf("%s", "abc");
  1. (    1) -->o<--
  2. (    3) -->abc<--

# 0050 (char *)
  ft_printf("%s", "this is a string");
  1. (    1) -->g<--
  2. (   16) -->this is a string<--

# 0051 (char *)
  ft_printf("%s ", "this is a string");
  1. (    2) -->` <--
  2. (   17) -->this is a string <--

# 0052 (char *)
  ft_printf("%s  ", "this is a string");
  1. (    3) -->a  <--
  2. (   18) -->this is a string  <--

# 0053 (char *)
  ft_printf("this is a %s", "string");
  1. (   11) -->this is a q<--
  2. (   16) -->this is a string<--

# 0054 (char *)
  ft_printf("%s is a string", "this");
  1. (   13) -->s is a string<--
  2. (   16) -->this is a string<--

# 0055 (char *)
  ft_printf("Line Feed %s", "\\n");
  1. (   11) -->Line Feed q<--
  2. (   12) -->Line Feed \\n<--

# 0056 (char *)
  ft_printf("%10s is a string", "this");
  1. (   22) -->         m is a string<--
  2. (   22) -->      this is a string<--

# 0057 (char *)
  ft_printf("%.2s is a string", "this");
  1. (   13) -->m is a string<--
  2. (   14) -->th is a string<--

# 0058 (char *)
  ft_printf("%5.2s is a string", "this");
  1. (   17) -->    n is a string<--
  2. (   17) -->   th is a string<--

# 0059 (char *)
  ft_printf("%10s is a string", "");
  1. (   22) -->         u is a string<--
  2. (   22) -->           is a string<--

# 0060 (char *)
  ft_printf("%.2s is a string", "");
  1. (   13) -->u is a string<--
  2. (   12) --> is a string<--

# 0061 (char *)
  ft_printf("%5.2s is a string", "");
  1. (   17) -->    v is a string<--
  2. (   17) -->      is a string<--

# 0062 (char *)
  ft_printf("%-10s is a string", "this");
  1. (   22) -->n          is a string<--
  2. (   22) -->this       is a string<--

# 0063 (char *)
  ft_printf("%-.2s is a string", "this");
  1. (   13) -->n is a string<--
  2. (   14) -->th is a string<--

# 0064 (char *)
  ft_printf("%-5.2s is a string", "this");
  1. (   17) -->o     is a string<--
  2. (   17) -->th    is a string<--

# 0065 (char *)
  ft_printf("%-10s is a string", "");
  1. (   22) -->v          is a string<--
  2. (   22) -->           is a string<--

# 0066 (char *)
  ft_printf("%-.2s is a string", "");
  1. (   13) -->v is a string<--
  2. (   12) --> is a string<--

# 0067 (char *)
  ft_printf("%-5.2s is a string", "");
  1. (   17) -->w     is a string<--
  2. (   17) -->      is a string<--

# 0068 (char *)
  ft_printf("%s %s", "this", "is");
  1. (    3) -->j o<--
  2. (    7) -->this is<--

# 0069 (char *)
  ft_printf("%s %s %s", "this", "is", "a");
  1. (    5) -->m r u<--
  2. (    9) -->this is a<--

# 0070 (char *)
  ft_printf("%s %s %s %s", "this", "is", "a", "multi");
  1. (    7) -->h m p r<--
  2. (   15) -->this is a multi<--

# 0071 (char *)
  ft_printf("%s %s %s %s string. gg!", "this", "is", "a", "multi", "string");
  1. (   19) -->\\ a d f string. gg!<--
  2. (   27) -->this is a multi string. gg!<--

# 0072 (char *)
  ft_printf("%s%s%s%s%s", "this", "is", "a", "multi", "string");
  1. (    5) -->_dgio<--
  2. (   18) -->thisisamultistring<--

# 0073 (NULL)
  ft_printf("@moulitest: %s", NULL);
  1. (   12) -->@moulitest: <--
  2. (   18) -->@moulitest: (null)<--

# 0075 (NULL)
  ft_printf("%s %s", NULL, string);
  1. (    2) --> p<--
  2. (   13) -->(null) string<--

# 0173 (int)
  ft_printf("@moulitest: %.10d", -42);
  1. (    0) --><--
  2. (   23) -->@moulitest: -0000000042<--

# 0179 (unsigned int)
  ft_printf("%u", -1);
  1. (   20) -->18446744073709551615<--
  2. (   10) -->4294967295<--

# 0180 (unsigned int)
  ft_printf("%u", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   10) -->4294967295<--

# 0182 (unsigned int)
  ft_printf("%5u", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   10) -->4294967295<--

# 0183 (unsigned int)
  ft_printf("%15u", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   15) -->     4294967295<--

# 0184 (unsigned int)
  ft_printf("%-15u", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   15) -->4294967295     <--

# 0185 (unsigned int)
  ft_printf("%015u", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   15) -->000004294967295<--

# 0186 (unsigned int)
  ft_printf("% u", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   10) -->4294967295<--

# 0187 (unsigned int)
  ft_printf("%+u", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   10) -->4294967295<--

# 0194 (unsigned long)
  ft_printf("%U", 4294967295);
  1. (   20) -->18446744073709551615<--
  2. (   10) -->4294967295<--

# 0195 (unsigned long)
  ft_printf("%hU", 4294967296);
  1. (    1) -->0<--
  2. (   10) -->4294967296<--

# 0196 (unsigned long)
  ft_printf("%U", 4294967296);
  1. (    1) -->0<--
  2. (   10) -->4294967296<--
\n--------------\n
